import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# ---------------- CONFIG ----------------
BOT_TOKEN = "8485177171:AAHfV9-45tNCv-ngUF5MYTIuppNzZp8V5Q4"
ADMINS = {
    1405345526: "Admin1",
    962513896: "Admin2"
}
DB_PATH = "database.db"

# ---------------- DATABASE ----------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        description TEXT,
        file_id TEXT,
        status TEXT DEFAULT '–ù–æ–≤–∞—è'
    )
    """)
    conn.commit()
    conn.close()

def add_request(user_id, description, file_id=None):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT INTO requests (user_id, description, file_id) VALUES (?, ?, ?)",
                (user_id, description, file_id))
    conn.commit()
    conn.close()

def get_user_requests(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, description, status FROM requests WHERE user_id=?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def get_request(req_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT * FROM requests WHERE id=?", (req_id,))
    row = cur.fetchone()
    conn.close()
    return row

def update_status(req_id, status):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE requests SET status=? WHERE id=?", (status, req_id))
    conn.commit()
    conn.close()

def attach_file(req_id, file_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE requests SET file_id=? WHERE id=?", (file_id, req_id))
    conn.commit()
    conn.close()

def get_all_requests():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, description, status FROM requests")
    rows = cur.fetchall()
    conn.close()
    return rows

# ---------------- FSM ----------------
class RequestForm(StatesGroup):
    waiting_for_description = State()
    waiting_for_file = State()

# ---------------- KEYBOARDS ----------------
def client_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_request")],
        [InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def request_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def status_keyboard(req_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–∞", callback_data=f"status_{req_id}_–ü—Ä–∏–Ω—è—Ç–∞")],
        [InlineKeyboardButton(text="üöß –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_{req_id}_–í —Ä–∞–±–æ—Ç–µ")],
        [InlineKeyboardButton(text="üîç –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", callback_data=f"status_{req_id}_–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")],
        [InlineKeyboardButton(text="üì§ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"status_{req_id}_–í—ã–ø–æ–ª–Ω–µ–Ω–æ")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", callback_data=f"status_{req_id}_–û—Ç–∫–ª–æ–Ω–µ–Ω–∞")]
    ])

# ---------------- BOT ----------------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# ---------------- CLIENT ----------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–¥–∞—á–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö.\n ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–∞–∂–Ω–æ: —É–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è —Å—Ç–æ–∏—Ç UserName –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ. ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è", reply_markup=client_menu())
    

@dp.callback_query(F.data == "restart")
async def restart(call: types.CallbackQuery):
    await call.message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é", reply_markup=client_menu())

@dp.callback_query(F.data == "back")
async def back(call: types.CallbackQuery):
    await call.message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=client_menu())

@dp.callback_query(F.data == "main_menu")
async def main_menu(call: types.CallbackQuery):
    await call.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=client_menu())

# ---------- SUPPORT ----------
@dp.callback_query(F.data == "support")
async def support(call: types.CallbackQuery):
    text = "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
    for admin_id, name in ADMINS.items():
        text += f"üë§ {name}: [–Ω–∞–ø–∏—Å–∞—Ç—å](tg://user?id={admin_id})\n"
    await call.message.answer(text, reply_markup=client_menu(), parse_mode="Markdown")

# ---------- REQUESTS ----------
@dp.callback_query(F.data == "new_request")
async def new_request(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è(–¢–ó):", reply_markup=request_menu())
    await state.set_state(RequestForm.waiting_for_description)

@dp.message(RequestForm.waiting_for_description, F.text)
async def process_description(msg: types.Message, state: FSMContext):
    await state.update_data(description=msg.text)
    await msg.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ 'next':", reply_markup=request_menu())
    await state.set_state(RequestForm.waiting_for_file)

@dp.message(RequestForm.waiting_for_file)
async def process_file(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    description = data.get("description", "(–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)")

    file_id = None
    if msg.document:
        file_id = msg.document.file_id
    elif msg.text and msg.text.lower() == "next":
        file_id = None

    add_request(msg.from_user.id, description, file_id)
    await state.clear()
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! –í —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—å—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å!", reply_markup=client_menu())

    for admin_id in ADMINS:
        try:
            username = f"@{msg.from_user.username}" if msg.from_user.username else "‚ùå –±–µ–∑ username"

            text = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
            f"üë§ –û—Ç: {msg.from_user.full_name}\n"
            f"üÜî ID: {msg.from_user.id}\n"
            f"üîó Username: {username}\n"
            f"üìù –¢–ó: {description}"
            )

            if file_id:
                await msg.bot.send_document(admin_id, file_id, caption=text)
            else:
                await msg.bot.send_message(admin_id, text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@dp.callback_query(F.data == "my_requests")
async def my_requests(call: types.CallbackQuery):
    requests = get_user_requests(call.from_user.id)
    if not requests:
        await call.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=client_menu())
        return
    text = "üìÇ –¢–≤–æ–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for r in requests:
        desc = r[1] if r[1] else "(–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)"
        short_desc = desc[:30] + ("..." if len(desc) > 30 else "")
        text += f"#{r[0]} ‚Äî {short_desc} | –°—Ç–∞—Ç—É—Å: {r[2]}\n"
    await call.message.answer(text, reply_markup=client_menu())

# ---------------- ADMIN CLEAR DB ----------------
@dp.message(Command("clear_requests"))
async def clear_requests(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM requests;")
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

# ---------------- ADMIN ----------------
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="all_requests")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@dp.callback_query(F.data == "all_requests")
async def all_requests(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        return
    reqs = get_all_requests()
    if not reqs:
        await call.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=client_menu())
        return

    kb_buttons = [[InlineKeyboardButton(text=f"#{r[0]} | {r[3]}", callback_data=f"req_{r[0]}")] for r in reqs]
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await call.message.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:", reply_markup=kb)

@dp.callback_query(F.data.startswith("req_"))
async def request_details(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        return
    req_id = int(call.data.split("_")[1])
    req = get_request(req_id)
    if not req:
        await call.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=client_menu())
        return
    text = f"üìå –ó–∞—è–≤–∫–∞ #{req[0]}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req[1]}\nüìù –¢–ó: {req[2]}\nüì¶ –°—Ç–∞—Ç—É—Å: {req[4]}"
    await call.message.answer(text, reply_markup=status_keyboard(req_id))

@dp.callback_query(F.data.startswith("status_"))
async def change_status(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        return
    _, req_id, status = call.data.split("_", 2)
    req_id = int(req_id)
    update_status(req_id, status)
    req = get_request(req_id)
    await call.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{req_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}", reply_markup=client_menu())
    try:
        await call.bot.send_message(req[1], f"üîî –°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–π –∑–∞—è–≤–∫–∏ #{req_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}", reply_markup=client_menu())
    except:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {req[1]}")

# ---------------- MAIN ----------------
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
